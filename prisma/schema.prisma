// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Courses {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String?
  courseTitle     String
  introduction    String?
  duration        Int?
  subject         String?
  level           String?       @default("BÃ¡sico")
  certificate     Boolean?      @default(false)
  description     String?
  imageUrl        String?
  categoryId      String?       @db.ObjectId
  tags            String?
  subscribedUsers String[]
  instructors     Instructors[]
  classes         Classes[]
  questions       Questions[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Category  Category? @relation(fields: [categoryId], references: [id])
  Tags      Tags?     @relation(fields: [tagsId], references: [id])
  tagsId    String?   @db.ObjectId

  @@index([categoryId])
}

model Tags {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  courses Courses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  courses Courses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instructors {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  formation1 String?
  formation2 String?
  profileUrl String?

  Course   Courses? @relation(fields: [courseId], references: [id])
  courseId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classes {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  classTitle   String?
  classNumber  Int?
  moduleTitle  String?
  moduleNumber Int?
  attachment   String?
  videoUrl     String?

  Course   Courses? @relation(fields: [courseId], references: [id])
  courseId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Questions {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  text    String?
  options Options[]

  Course   Courses? @relation(fields: [courseId], references: [id])
  courseId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Options {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  Questions   Questions? @relation(fields: [questionsId], references: [id])
  questionsId String?    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Users {
  id                String              @id @map("_id") @db.ObjectId
  fullname          String
  subscribedCourses SubscribedCourses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubscribedCourses {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  courseId         String
  finishedAt       String             @default("")
  completedClasses CompletedClasses[]

  Users   Users?  @relation(fields: [usersId], references: [id])
  usersId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompletedClasses {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  classId     String
  isCompleted Boolean @default(false)

  subscribedCourses   SubscribedCourses? @relation(fields: [subscribedCoursesId], references: [id])
  subscribedCoursesId String?            @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
